<?php

namespace PackageVersions;

/**
 * This class is generated by ocramius/package-versions, specifically by
 * @see \PackageVersions\Installer
 *
 * This file is overwritten at every run of `composer install` or `composer update`.
 */
final class Versions
{
    const ROOT_PACKAGE_NAME = '__root__';
    const VERSIONS = array (
  'cboden/ratchet' => 'v0.4.1@0d31f3a8ad4795fd48397712709e55cd07f51360',
  'evenement/evenement' => 'v3.0.1@531bfb9d15f8aa57454f5f0285b18bec903b8fb7',
  'guzzlehttp/psr7' => '1.4.2@f5b8a8512e2b58b0071a7280e39f14f72e05d87c',
  'ocramius/package-versions' => '1.3.0@4489d5002c49d55576fa0ba786f42dbb009be46f',
  'ocramius/proxy-manager' => '2.1.1@e18ac876b2e4819c76349de8f78ccc8ef1554cd7',
  'psr/http-message' => '1.0.1@f6561bf28d520154e4b0ec72be95418abe6d9363',
  'ratchet/rfc6455' => 'v0.2.3@cc8a1a46a703ce01de10fdb5fab387381b66edc8',
  'react/cache' => 'v0.4.2@75494f26b4ef089db9bf8c90b63c296246e099e8',
  'react/dns' => 'v0.4.13@7d1e08c300fd7de600810883386ee5e2a64898f4',
  'react/event-loop' => 'v0.5.2@e94985d93c689c554265b01014f8c3064921ca27',
  'react/promise' => 'v2.5.1@62785ae604c8d69725d693eb370e1d67e94c4053',
  'react/promise-timer' => 'v1.3.0@604513e33feb96ffb0dfb3d25233d3f9f0dce356',
  'react/socket' => 'v0.8.11@94e98bb4def7054454784b330e44f73b7f6c160f',
  'react/stream' => 'v0.7.7@10100896018fd847a257cd81143b8e1b7be08e40',
  'symfony/http-foundation' => 'v4.0.8@d0864a82e5891ab61d31eecbaa48bed5a09b8e6c',
  'symfony/polyfill-mbstring' => 'v1.7.0@78be803ce01e55d3491c1397cf1c64beb9c1b63b',
  'symfony/routing' => 'v4.0.8@0663036dd57dbfd4e9ff29f75bbd5dd3253ebe71',
  'zendframework/zend-code' => '3.3.0@6b1059db5b368db769e4392c6cb6cc139e56640d',
  'zendframework/zend-eventmanager' => '3.2.1@a5e2583a211f73604691586b8406ff7296a946dd',
  '__root__' => 'No version set (parsed as 1.0.0)@',
);

    private function __construct()
    {
    }

    /**
     * @throws \OutOfBoundsException if a version cannot be located
     */
    public static function getVersion(string $packageName) : string
    {
        if (isset(self::VERSIONS[$packageName])) {
            return self::VERSIONS[$packageName];
        }

        throw new \OutOfBoundsException(
            'Required package "' . $packageName . '" is not installed: cannot detect its version'
        );
    }
}
